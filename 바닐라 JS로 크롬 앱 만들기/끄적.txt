#2.0 Your First JS Project
브라우저는 HTML을 열고, HTML은 CSS와 JavaScript를 가져온다.
    <link rel='stylesheet' type='text/css' media='screen' href='style.css'>
    <script src='app.js'></script>

#2.1 Basic Data Types
number : integer, float
string : "text" 'text'

#2.2 Variables
console.log(); //console에 log, print하는 성격
const 상수(기본적으로 사용할 것)
변수 명 camelCase으로

#2.3 const and let
let 변수(가끔 필요시에 사용)
코드는 위에서 아래로 실행
var 과거에 사용했던 것.

#2.4 Booleans 
boolean = ture, false
null = nothing 변수를 선언했고 값은 아무것도 없는 상태로 정의함(의도적으로 생성. 자연적으로 발생하는 값이 아님)
undifined 변수를 선언해서 메모리 안에는 존재하지만, 값이 정의되지 않음

#2.5 Arrays
데이터로 이루어진 리스트. 각각의 항목을 쉼표로 구분, []
0부터 인덱스 시작. 
삽입하는 방법은  .push()
정보 없데이트도 가능 [몇번째 내용을] = 뭐로 바꾸겠다

#2.6 Objects
Arrays로 묶었을 때 무슨 의미인지 알 수 없을 때
{ } 안에서 = 대신 : , 연결은 콤마로 하여 property들을 작성 
consol.log로 출력 시 {name: 'jj', point: 10, fat: false} 처럼 나옴
object의 형을 const로 만들었더라도 그 내부의 값을 바꾸는 것은 가능함

#2.7 Functions part One & #2.8 Functions part Two
계속 사용 가능한 코드
function 함수명( {}안에서 사용할 argument 이름) { }
인자 명을 함수 밖에서 사용하려고 하면 오류
Objects 안에서 함수를 생성할 수도 있음

#2.10 Recap II 계산기 만들어보기

#2.11 Returns
함수를 호출했을 때 값을 return. return 되는 순간 함수 끝남 

#2.13 Conditionals
prompt() 는 예전에 사용하던 입력값 받는 방식.
typeof 변수명 : 변수의 타입
parseInt() : integer 형으로 변환.(typeof = number)
if 만약 () 안의 변수가 number가 아니라면 NaN (Not a Number) 출력됨
isNaN() : ()안의 것이 NaN가 맞는지 아닌지 boolean 값을 return하는 함수

#2.15 Conditionals part Three
&& || 
== 값만 비교하는 연산자 ( 0 == false => true)
=== 유형도 비교 ( 0 === false => false)

#3.0 The Document Object
JavaScript에서 HTML을 읽고, 수정 가능
document.title = "Hi" 하면 변경됨
document.body

#3.1 HTML in Javascript
특정 무언가를 가져오는 것
document.getElementById("title")
autofocus

//JS를 통해 HTML를 변경
const title = document.getElementById("title"); //HTML에서 id가 같은 element 항목을 잡아와서
title.innerText = "Got you"; //innertext를 Got you로 변경

#3.2 Searching For Elements
대부분의 경우에는 id보다는 class Name을 사용할거임
<h1 class="hello">Grab me!</h1>

const hellos = document.getElementsByClassName("hello");
console.log(hellos);

querySelector는 element를 CSS 방식으로 검색 가능
const title = document.querySelector(".hello hi");
첫번째 element만 가져옴
이후의 element 가져오려면 ( :first child ) 같은 표현
const title = document.querySelector("#hello:first-child");

id 하위의 form을 가져오거나
querySelectorAll은 Array로 반환됨

#3.3 Events & #3.4 Events part Two
console.dir() : 그 안의 elements 확인
여기서 on 들어가는 것들은 event
style 안에서 element의 style properties를 JavaScript 형식으로 볼 수 있음

title.style.color = "blue";

listening event : addEventListener를 통해 (내가 가져온 HTML element에 대한 "event"가 실행되면, 함수를 호출하겠다) //함수 이름만 넣지 () 괄호 넣지 않아야 함!!
event ex. click mouseenter mouseleave 

function handleTitleClick(){
    console.log("title was chlicked");
    title.style.color = "blue";
}
title.addEventListener("click",handleTitleClick);

https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
https://developer.mozilla.org/en-US/docs/Web/API/Element

oneventname property : copy, cut, paste, invalid, animation events, input events, pointer events, transition events ...

#3.5 More Events 
window interface
https://developer.mozilla.org/en-US/docs/Web/API/Window

event를 확인하는 방법은 
[1] title.addEventListener("click",handleTitleClick); <더 선호. removeEventListener 같은 걸 할 숭 ㅣㅆ음>
[2] title.onclick = handleTitleClick;

"resize" = Fired when the window has been resized.

function handleWindowResize(){
    document.body.style.backgroundColor = "tomato";
}
window.addEventListener("resize", handleWindowResize);

Clipboard events - "copy" : Fired when the user initiates a copy action through the browser's user interface. Also available via the oncopy property.

Connection events - "offline" : Fired when the browser has lost access to the network and the value of navigator.onLine has switched to false.
- "online" : Fired when the browser has gained access to the network and the value of navigator.onLine has switched to true.
