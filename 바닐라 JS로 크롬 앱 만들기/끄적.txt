#2.0 Your First JS Project
브라우저는 HTML을 열고, HTML은 CSS와 JavaScript를 가져온다.
    <link rel='stylesheet' type='text/css' media='screen' href='style.css'>
    <script src='app.js'></script>

#2.1 Basic Data Types
number : integer, float
string : "text" 'text'

#2.2 Variables
console.log(); //console에 log, print하는 성격
const 상수(기본적으로 사용할 것)
변수 명 camelCase으로

#2.3 const and let
let 변수(가끔 필요시에 사용)
코드는 위에서 아래로 실행
var 과거에 사용했던 것.

#2.4 Booleans 
boolean = ture, false
null = nothing 변수를 선언했고 값은 아무것도 없는 상태로 정의함(의도적으로 생성. 자연적으로 발생하는 값이 아님)
undifined 변수를 선언해서 메모리 안에는 존재하지만, 값이 정의되지 않음

#2.5 Arrays
데이터로 이루어진 리스트. 각각의 항목을 쉼표로 구분, []
0부터 인덱스 시작. 
삽입하는 방법은  .push()
정보 없데이트도 가능 [몇번째 내용을] = 뭐로 바꾸겠다

#2.6 Objects
Arrays로 묶었을 때 무슨 의미인지 알 수 없을 때
{ } 안에서 = 대신 : , 연결은 콤마로 하여 property들을 작성 
consol.log로 출력 시 {name: 'jj', point: 10, fat: false} 처럼 나옴
object의 형을 const로 만들었더라도 그 내부의 값을 바꾸는 것은 가능함

#2.7 Functions part One & #2.8 Functions part Two
계속 사용 가능한 코드
function 함수명( {}안에서 사용할 argument 이름) { }
인자 명을 함수 밖에서 사용하려고 하면 오류
Objects 안에서 함수를 생성할 수도 있음

#2.10 Recap II 계산기 만들어보기

#2.11 Returns
함수를 호출했을 때 값을 return. return 되는 순간 함수 끝남 

#2.13 Conditionals
prompt() 는 예전에 사용하던 입력값 받는 방식.
typeof 변수명 : 변수의 타입
parseInt() : integer 형으로 변환.(typeof = number)
if 만약 () 안의 변수가 number가 아니라면 NaN (Not a Number) 출력됨
isNaN() : ()안의 것이 NaN가 맞는지 아닌지 boolean 값을 return하는 함수

#2.15 Conditionals part Three
&& || 
== 값만 비교하는 연산자 ( 0 == false => true)
=== 유형도 비교 ( 0 === false => false)

#3.0 The Document Object
JavaScript에서 HTML을 읽고, 수정 가능
document.title = "Hi" 하면 변경됨
document.body

#3.1 HTML in Javascript
특정 무언가를 가져오는 것
document.getElementById("title")
autofocus

//JS를 통해 HTML를 변경
const title = document.getElementById("title"); //HTML에서 id가 같은 element 항목을 잡아와서
title.innerText = "Got you"; //innertext를 Got you로 변경

#3.2 Searching For Elements
대부분의 경우에는 id보다는 class Name을 사용할거임
<h1 class="hello">Grab me!</h1>

const hellos = document.getElementsByClassName("hello");
console.log(hellos);

querySelector는 element를 CSS 방식으로 검색 가능
const title = document.querySelector(".hello hi");
첫번째 element만 가져옴
이후의 element 가져오려면 ( :first child ) 같은 표현
const title = document.querySelector("#hello:first-child");

id 하위의 form을 가져오거나
querySelectorAll은 Array로 반환됨

#3.3 Events & #3.4 Events part Two
console.dir() : 그 안의 elements 확인
여기서 on 들어가는 것들은 event
style 안에서 element의 style properties를 JavaScript 형식으로 볼 수 있음

title.style.color = "blue";

listening event : addEventListener를 통해 (내가 가져온 HTML element에 대한 "event"가 실행되면, 함수를 호출하겠다) //함수 이름만 넣지 () 괄호 넣지 않아야 함!!
event ex. click mouseenter mouseleave 

function handleTitleClick(){
    console.log("title was chlicked");
    title.style.color = "blue";
}
title.addEventListener("click",handleTitleClick);

https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement
https://developer.mozilla.org/en-US/docs/Web/API/Element

oneventname property : copy, cut, paste, invalid, animation events, input events, pointer events, transition events ...

#3.5 More Events 
window interface
https://developer.mozilla.org/en-US/docs/Web/API/Window

event를 확인하는 방법은 
[1] title.addEventListener("click",handleTitleClick); <더 선호. removeEventListener 같은 걸 할 숭 ㅣㅆ음>
[2] title.onclick = handleTitleClick;

"resize" = Fired when the window has been resized.

function handleWindowResize(){
    document.body.style.backgroundColor = "tomato";
}
window.addEventListener("resize", handleWindowResize);

Clipboard events - "copy" : Fired when the user initiates a copy action through the browser's user interface. Also available via the oncopy property.

Connection events - "offline" : Fired when the browser has lost access to the network and the value of navigator.onLine has switched to false.
- "online" : Fired when the browser has gained access to the network and the value of navigator.onLine has switched to true.

#3.6 CSS in Javascript & #3.7 CSS in Javascript part Two & #3.8 CSS in Javascript part Three

function handleTitleClick(){
    const nowColor = h1.style.color;
    let newColor = h1.style.color;
    console.log("title was chlicked");
    if (nowColor === "blue"){
        newColor = "tomato";
    } else {
        newColor = "blue";
    }
    h1.style.color = newColor;
}

element를 찾고 -> event를 listen -> 그 event에 반응해라 

transition: color 0.5s ease-in-out;

classList = class들의 목록으로 작업할 수 있게끔 허용.
classList.contains() = HTML element의 class에 포함되어 있는지 확인
classList.remove(), add()

toggle class name 체크하여 classList에 포함되어 있으면 제거, 없으면 추가
h1.classList.toggle("clicked");

#4.0 Input Values

[[html]]
<body>
    <div id="login-form">
        <input type="text" placeholder="What is your name?"/>
        <button>Log In</button>
        <script src='app.js'></script>
    </div>
</body>

[[js]]
const loginForm = document.getElementById("login-form");//loginForm은 HTML element로서
const loginInput = loginForm.querySelector("input");//내부에서 바로 querySelector 검색 가능
const loginButton = loginForm.querySelector("button");

/*
또는 
const loginInput = document.querySelector("#login-form input");//내부에서 바로 querySelector 검색 가능
const loginButton = document.querySelector("#login-form button");
*/

function onLoginBtnClick() {
    //console.dir(loginInput.value); //내부 확인
    console.log("hello",loginInput.value); //console에 찍기
}

loginButton.addEventListener("click", onLoginBtnClick)

#4.1 Form Submission

if(userName === ""){
        alert("please write your name");
    } else if (userName.length > 15){
        alert("your name is too long");
    } //값의 유효성을 확인하는 방법..이지만 html을 통한 기존 기능 활용
}

->

<body>
    <form id="login-form"><!--input의 유효성 검사를 작동시키기 위해서는 form이 필요-->
        <input required maxlength="15" type="text" placeholder="What is your name?"/>
        <input type="submit" value="Log In"/><!--form은 type="submit"인 input 또는 button을 통해 submit-->
        <!--form안에서 enter 눌러도 (input이 더이상 존재하지 않는다면 자동으로) submit됨-->
    </form>
</body>

#4.2 Events & #4.3 Events part Two
form submit하면 새로고침되는 기본동작..
addEventListener를 통해 얻은 정보를 function의 argument로 가지고 (이름 event로 하는 것이 좋음) .preventDefault() = 어떤 event의 기본 행동을 막는 function

function onLoginSubmit(event) {
    event.preventDefault();
    console.log(event);
}

loginForm.addEventListener("submit", onLoginSubmit);
//브라우저는 우선 function을 호출하고, 브라우저 내의 event로부터 정보를 잡아내서 이 정보를 가지고 function 실행

#4.4 Getting Username

classList.add("hidden") 하고
css 파일에서 
.hidden {    display: none; }

const HIDDEN_CLASSNAME = "hidden"; //string만 포함된 변수는 대문자로 표기

greeting.innerText = `Hello ${username}`; //또는 "Hello "+username 
//변수와 string을 결합한다면 ${변수명}으로 표현 & ` 이거 ` 안에 담을 것!
  
#4.5 Saving Username

localStorage 이미 존재. 브라우저가 뭔가 저장할 수 있도록
localStorage.setItem('이 이름으로','이 내용을') = 정보 저장
localStorage.getItem('저장된 이름') , removeItem('저장된 이름')

localStorage.setItem("username", username);//("이름",값)으로 storage의 item 저장

#4.6 Loading Username 

localStorage.getItem('없는 이름')이면 null 반환 => user 정보 유무 확인용으로 사용
(흐름) localStorage에 user 정보 있으면 거기서 받아서 인자로 넣어줌. 없으면 form의 submit을 기다림. input으로부터 정보를 받고 작업.

const USERNAME_KEY = "username";//자주 쓰니까 변수로 저장. 변수에서 오타가 나면 JS가 알려줄테니까
//반복되는 작업은 그냥 따로 뺌

const savedUsername = localStorage.getItem(USERNAME_KEY);//없으면 null 뜨겠지

if (savedUsername === null) { //그 이름이 저장되어 있지 않다면
  //SHOW the form
  loginForm.classList.remove(HIDDEN_CLASSNAME);
  loginForm.addEventListener("submit", onLoginSubmit);
} else {
    //SHOW the greetings
  paintGreetings(savedUsername);
}

#4.7 Super Recap


